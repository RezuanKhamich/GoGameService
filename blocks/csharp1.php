<?php 
    include_once "../config.php";
?>

<!DOCTYPE html>
<html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="../css/bootstrap.min.css">
        <link rel="stylesheet" href="../css/style.css">
        <link rel="shortcut icon" type="image/png" href="../media/logo.png"/>
        <title>GoGame</title>
    </head>
<body>
    
    <?php require "../header.php"?>

    <main class="content-wrapper">
        <div class="container-fluid">
            <h1 class="text_main-title">Теоретический материал по C# | Урок 1</h1>
            <hr>
            <h4>Введение</h4>
                <br>
                <p class="text-sm-left">
                На сегодняшний момент язык программирования C# один из самых мощных, быстро развивающихся и востребованных языков в ИТ-отрасли. В настоящий момент на нем пишутся самые различные приложения: от небольших десктопных программок до крупных веб-порталов и веб-сервисов, обслуживающих ежедневно миллионы пользователей. 
                    <br>
                    Давайте начнем с самого простого и посмотрим на код, который досупен разработчику при создании .cs файла:
                    <br>
                    <pre><code>
    using System; // подключаемое пространство имен
    namespace HelloApp // объявление нового пространства имен
    {
        class Program   // объявление нового класса
        {
            static void Main(string[] args) // объявление нового метода
            {
        // действия метода
            } // конец объявления нового метода
        } // конец объявления нового класса
    } // конец объявления нового пространства имен
                        </code>
                    </pre>
                    В начале файла идет директива using, после которой идет название подключаемого пространства имен. Пространства имен представляют собой организацию классов (про классы мы поговорим чуть позже) в общие блоки. Например, на первой строке using System; подключается пространство имен System, которое содержит фундаментальные и базовые классы платформы .NET.  
                    <br>
                    <br>
                    И так как C# имеет Си-подобный синтаксис, каждая строка завершается точкой с запятой, а каждый блок кода помещается в фигурные скобки.
                    <br>
                    <br>
                    Далее начинается уже собственно наше пространство имен, которое будет создавать отдельную сборку или исполняемую программу: сначала идет ключевое слово namespace, после которого название пространства имен. По умолчанию Visual Studio дает ему название проекта. Далее внутри фигурных скобок идет блок пространства имен. 
                    <br>
                    <br>
                    Пространство имен может включать другие пространства или классы. В данном случае у нас по умолчанию сгенерирован один класс - Program. Классы объявляются похожим способом - сначала идет ключевое слово class, а потом название класса, и далее блок самого класса в фигурных скобках.
                    <br>
                    <br>  
                    Класс может содержать различные переменные, методы, свойства, прочие инструкции. В данном случае у нас объявлен один метод Main. В программе на C# метод Main является входной точкой программы, с него начинается все управление. Он обязательно должен присутствовать в программе. 
                    <br>
                    <br>  
                    Слово static указывает, что метод Main - статический, а слово void - что он не возвращает никакого значения. Позже мы подробнее разберем, что все это значит.
                    <br>
                    <br>
                    Далее в скобках у нас идут параметры метода - string[] args - это массив args, который хранит значения типа string, то есть строки. В данном случае они нам пока не нужны, но в реальной программе это те параметры, которые передаются при запуске программы из консоли. Подробнее, что такое метод и зачем ему параметры, мы поговорим позже.
                    <br>
                    <br>
                    Если мы запустим данную программу, то у нас откроется и закроется консоль. Это происходит, потому что не в нашем методе Main() ничего не написано. Давайте изменим код и в нашем методе напишем: 
                    <br>
                    <pre><code>
    Console.Write("Введите свое имя: ");
    string name = Console.ReadLine();       // вводим имя
    Console.WriteLine($"Привет {name}");    // выводим имя на консоль   
    Console.ReadKey();
                        </code>
                    </pre>
                    Давайте перед запуском разберемся что мы такое написали.
                    <br>
                    <br>
                    Первая строка в нашу консоль выведется текст:  Введите свое имя:. Почему же это происходит? Дело в том, что класс Console, метод которого вызывается, находится в пространстве имен System. Это пространство подключено в начале с помощью директивы using. Без подключения пространства имен System я бы не смог использовать класс Console и вывести строку на консоль. Однако в принципе нам необязательно подключать пространство имен. Мы можем даже удалить первую строку, но в этом случае мы тогда должны будем указать полный путь до используемого класса. Например, в нашем случае мы могли бы написать: System.Console.WriteLine("Введите свое имя:").
                    <br>
                    <br>
                    На второй строке определяется строковая переменная name, в которую пользователь вводит информацию с консоли. Здесь алгоритм тот же. Мы обращаемся к классу Console, в котором есть метод ReadLine(). 
                    <br>
                    <br>
                    Пояснение: если вы пользуетесь Visual Studio, то вы можете даже посмотреть на класс Console(). Для этого вам необходимо нажать правой кнопкой мыши на текст, в котором вы обращаетесь к этому классу и в списке выбрать: перейти к определению.
                    <br>
                    <br> 
                    Затем введенное имя выводится на консоль. Чтобы ввести значение переменной name внутрь выводимой на консоль строки, применяются фигурные скобки {}. То есть при выводе строки на консоль выражение {name} будет заменяться на значение переменной name - введенное имя. Однако чтобы можно было вводить таким образом значения переменных внутрь строки, перед строкой указывается знак доллара $.
                    <br>
                    <br>
                    <br>
                    <h4>Основы программирования</h4> 
                    <br>
                    <h5>Переменные</h5> 
                    <br>
                    Для хранения данных в программе применяются переменные. Переменная представляет именнованную область памяти, в которой хранится значение определенного типа. Переменная имеет тип, имя и значение. Тип определяет, какого рода информацию может хранить переменная.
                    <br>
                    <br>
                    Перед использованием любую переменную надо определить. Синтаксис определения переменной выглядит следующим образом:
                    <br>
                    <pre><code>
    тип имя_переменной;
                        </code>
                    </pre>
                    Вначале идет тип переменной, потом ее имя. В качестве имени переменной может выступать любое произвольное название, которое удовлетворяет следующим требованиям:
                    <br>
                    <br>
                    - имя может содержать любые цифры, буквы и символ подчеркивания, при этом первый символ в имени должен быть буквой или символом подчеркивания
                    <br>
                    <br>
                    - в имени не должно быть знаков пунктуации и пробелов
                    <br>
                    <br>
                    - имя не может быть ключевым словом языка C#. Таких слов не так много, и при работе в Visual Studio среда разработки подсвечивает ключевые слова синим цветом.
                    <br>
                    <br>
                    Хотя имя переменой может быть любым, но следует давать переменным описательные имена, которые будут говорить об их предназначении.
                    <br>
                    <br>
                    Например, определим простейшую переменную: string name; В данном случае определена переменная name, которая имеет тип string. то есть переменная представляет строку.
                    <br>
                    <br>
                    После определения переменной можно присвоить некоторое значение:
                    <pre><code>
    string name;
    name = "Tom";
                    </code>
                    </pre>
                    Так как переменная name представляет тип string, то есть строку, то мы можем присвоить ей строку в двойных кавычках. Причем переменной можно присвоить только то значение, которое соответствует ее типу.
                    <br>
                    <br>
                    В дальнейшем с помощью имени переменной мы сможем обращаться к той области памяти, в которой хранится ее значение.
                    <br>
                    <br>
                    Также мы можем сразу при определении присвоить переменной значение. Данный прием называется инициализацией: string name = "Tom";
                    <br>
                    <br>
                    Отличительной чертой переменных является то, что в программе можно многократно менять их значение. Например, создадим небольшую программу, в которой определим переменную, поменяем ее значение и выведем его на консоль:
                    <pre><code>
    using System;
    namespace HelloApp
    {
        class Program
        {
            static void Main(string[] args)
            {
                string name = "Tom";  // определяем переменную и инициализируем ее
                Console.WriteLine(name);    // Tom
                name = "Bob";       // меняем значение переменной
                Console.WriteLine(name);    // Bob
                Console.Read();
            }
        }
    }
                    </code>
                    <h5>Типы данных</h5> 
                    <br>
                    





                    </div>
                   
                </div>
        </div>
        
    </main>

    <?php require "../footer.php"?>
    
</body>
</html>